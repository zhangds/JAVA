package org.interestTeam.model2.service;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.interestTeam.model2.dao.UserDao;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ZSetOperations.TypedTuple;
import org.springframework.stereotype.Service;

@Service
public interface RedisService {

	public RedisTemplate<Object, Object> getInstance();
	public boolean hasKey(String key);
	public void set(String key, String value);
	 public String get(String key);
	 public void setForTimeMS(String key, String value, long time);
	 public void setForTimeMIN(String key, String value, long time);
	 public void setForTimeCustom(String key, String value, long time, TimeUnit type);
	 public String getAndSet(String key, String value);
	 public void batchSet(Map<String, String> keyAndValue);
	 public void batchSetIfAbsent(Map<String, String> keyAndValue);
	 public Long increment(String key, long number);
	 public Double increment(String key, double number);
	 public boolean expire(String key, long time, TimeUnit type);
	 public boolean persist(String key);
	 public Long getExpire(String key);
	 public void rename(String key, String newKey);
	 public void delete(String key);
	 public void put(String key, String hashKey, String value);
	 public void putAll(String key, Map<String, String> map);
	 public boolean putIfAbsent(String key, String hashKey, String value);
	 public Long delete(String key, String... hashKeys);
	 public Long increment(String key, String hashKey, long number);
	 public Double increment(String key, String hashKey, Double number);
	 public Object getHashKey(String key, String hashKey);
	 public Map<Object, Object> getHashEntries(String key);
	 public boolean hashKey(String key, String hashKey);
	 public Set<Object> hashKeys(String key);
	 public Long hashSize(String key);
	 public Long leftPush(String key, Object value);
	 public Object leftPop(String key);
	 public Long leftPushAll(String key, Collection<Object> values);
	 public Long rightPush(String key, Object value);
	 public Object rightPop(String key);
	 public Long rightPushAll(String key, Collection<Object> values);
	 public Object popIndex(String key, long index);
	 public Long listSize(String key);
	 public List<Object> listRange(String key, long start, long end);
	 public Long listRemove(String key, long count, Object value);
	 public void listTrim(String key, long start, long end);
	 public Object rightPopAndLeftPush(String key, String key2);
	 public Long add(String key, String... values);
	 public Set<Object> difference(String key, String otherkey);
	 public Set<Object> difference(String key, Collection<Object> otherKeys);
	 public Long differenceAndStore(String key, String otherkey, String newKey);
	 public Long differenceAndStore(String key, Collection<Object> otherKeys, String newKey);
	 public Long remove(String key, Object... values);
	 public Object randomSetPop(String key);
	 public Object randomSet(String key);
	 public List<Object> randomSet(String key, long count);
	 public Set<Object> randomSetDistinct(String key, long count);
	 public boolean moveSet(String key, Object value, String destKey);
	 public Long setSize(String key);
	 public boolean isMember(String key, Object value);
	 public Set<Object> unionSet(String key, String otherKey);
	 public Set<Object> unionSet(String key, Collection<Object> otherKeys);
	 public Long unionAndStoreSet(String key, String otherKey, String destKey);
	 public Long unionAndStoreSet(String key, Collection<Object> otherKeys, String destKey);
	 public Set<Object> members(String key);
	 public boolean add(String key, Object value, double score);
	 public Long batchAddZset(String key, Set<TypedTuple<Object>> tuples);
	 public Long removeZset(String key, String... values);
	 public Double incrementScore(String key, Object value, double score);
	 public Long rank(String key, Object value);
	 public Long reverseRank(String key, Object value);
	 public Set<TypedTuple<Object>> rangeWithScores(String key, long start, long end);
	 public Set<Object> range(String key, long start, long end);
	 public Set<Object> rangeByScore(String key, double min, double max);
	 public Set<TypedTuple<Object>> rangeByScoreWithScores(String key, double min, double max);
	 public Set<Object> rangeByScore(String key, double min, double max, long offset, long count);
	 public Set<TypedTuple<Object>> rangeByScoreWithScores(String key, double min, double max, long offset, long count);
	 public Set<Object> reverseRange(String key, long start, long end);
	 public Set<TypedTuple<Object>> reverseRangeWithScores(String key, long start, long end);
	 public Set<Object> reverseRangeByScore(String key, double min, double max);
	 public Set<TypedTuple<Object>> reverseRangeByScoreWithScores(String key, double min, double max);
	 public Set<Object> reverseRangeByScore(String key, double min, double max, long offset, long count);
	 public Set<TypedTuple<Object>> reverseRangeByScoreWithScores(String key, double min, double max, long offset,
	            long count);
	 public long countZSet(String key, double min, double max);
	 public long sizeZset(String key);
	 public Double score(String key, Object value);
	 public Long removeRange(String key, long start, long end);
	 public Long removeRangeByScore(String key, double min, double max);
	 public Long unionAndStoreZset(String key, String otherKey, String destKey);
	 public Long unionAndStoreZset(String key, Collection<String> otherKeys, String destKey);
	 public Long intersectAndStore(String key, String otherKey, String destKey);
	 public Long intersectAndStore(String key, Collection<String> otherKeys, String destKey);
	 public void hmSet(String key, String hashKey, Object value);
	 public Object hmGet(String key, Object hashKey);
	 public void hmDeleteKey(String key, Object hashKey);
	 public void hmClear(String key, Object hashKey);
	 public UserDao getSession(String key,String userName);
	 public void setSession(String key,String userName, UserDao session, long dayTime);
	 public void clearSession(String key,String username);
	 
}
